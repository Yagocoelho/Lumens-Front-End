{"version":3,"file":"ngx-order.pipe.d.ts","sources":["ngx-order.pipe.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { PipeTransform } from \"@angular/core\";\r\nexport declare class OrderPipe implements PipeTransform {\r\n    /**\r\n     * Check if a value is a string\r\n     *\r\n     * @param value\r\n     */\r\n    static isString(value: any): boolean;\r\n    /**\r\n     * Sorts values ignoring the case\r\n     *\r\n     * @param a\r\n     * @param b\r\n     */\r\n    static caseInsensitiveSort(a: any, b: any): any;\r\n    /**\r\n     * Default compare method\r\n     *\r\n     * @param a\r\n     * @param b\r\n     */\r\n    static defaultCompare(a: any, b: any): 0 | 1 | -1;\r\n    /**\r\n     * Parse expression, split into items\r\n     * @param expression\r\n     * @returns {string[]}\r\n     */\r\n    static parseExpression(expression: string): string[];\r\n    /**\r\n     * Get value by expression\r\n     *\r\n     * @param object\r\n     * @param expression\r\n     * @returns {any}\r\n     */\r\n    static getValue(object: any, expression: string[]): any;\r\n    /**\r\n     * Set value by expression\r\n     *\r\n     * @param object\r\n     * @param value\r\n     * @param expression\r\n     */\r\n    static setValue(object: any, value: any, expression: string[]): void;\r\n    transform(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any;\r\n    /**\r\n     * Sort array, returns sorted array\r\n     *\r\n     * @param array\r\n     * @param expression\r\n     * @param reverse\r\n     * @param isCaseInsensitive\r\n     * @param comparator\r\n     * @returns {Type[]}\r\n     */\r\n    private sortArray;\r\n    /**\r\n     * Transform Object\r\n     *\r\n     * @param value\r\n     * @param expression\r\n     * @param reverse\r\n     * @param isCaseInsensitive\r\n     * @param comparator\r\n     * @returns {any[]}\r\n     */\r\n    private transformObject;\r\n    /**\r\n     * Apply multiple expressions\r\n     *\r\n     * @param value\r\n     * @param {any[]} expressions\r\n     * @param {boolean} reverse\r\n     * @param {boolean} isCaseInsensitive\r\n     * @param {Function} comparator\r\n     * @returns {any}\r\n     */\r\n    private multiExpressionTransform;\r\n}\r\n"]}